#!/usr/bin/env bash
# Code generated by ent, DO NOT EDIT.

set -euxo pipefail

function main() {
    local os=$1
    local arch=$2
    local version=$3
    local release_ws=$4

    echo "Start composing {{ .name }} package"
    tiup mirror set --reset
    local archive_dir="{{ .name }}"
    rm -rf "$archive_dir"
    mkdir -p "$archive_dir"

    {{ $components := .components | jq `map(select(.if != false ))` }}
    ## fetch the public pkgs to another mirror.
    {{- with ($components | jq `map(select(.src.type == "tiup-clone"))`) }}
    {{- if gt (. | len)  0 }}
    tiup mirror clone $archive_dir --os $os --arch $arch 
    {{- range . -}}{{ printf " --%s %s" .name .src.version }}{{- end -}}
    {{- end }}
    {{- end }}

    ## self mirror to archive dir.
    tiup mirror set $archive_dir
    tiup_publish_options="--os $os --arch $arch --key $(ls $archive_dir/keys/*-pingcap.json | head -n 1)"

    ## pull tarballs from oci registry and publish to local tiup mirror.
    {{- range ($components | jq `map(select(.src.type == "oci"))`) }}
    # {{ .name }}
    oras pull {{ .src.url }}
    {{- if has .src "extract" }}
    tar -zxvf {{ .src.path }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    {{- else if has . "publish" }}
    tiup mirror publish {{ default .name .publish.name }} $version {{ .src.path }} {{ .publish.entrypoint }} ${tiup_publish_options}
    {{- else }}        
    mv {{ .src.path }} $archive_dir
    {{- end }}
    {{- end }}

    ## some pkgs need to re-publish
    {{- range ($components | jq `map(select(.src.type == "http"))`) }}
    # {{ .name }}
    wget {{ .src.url }}
    {{- if has .src "extract" }}
    tar -zxvf {{ path.Base .src.url }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    {{- else if has . "publish" }}    
    tiup mirror publish {{ default .name .publish.name }} $version {{ path.Base .src.url }} {{ .publish.entrypoint }} ${tiup_publish_options}
    {{- else }}        
    mv {{ path.Base .src.url }} $archive_dir
    {{- end }}
    {{- end }}

    ## list the tiup packages.
    tiup list --verbose

    ## shrink the size.
    rm -rf $archive_dir/commits

    ## archive it
    mkdir -p "$release_ws"
    local save_file="$release_ws/$archive_dir.tar.gz"
    tar -zcvf "$save_file" $archive_dir
    rm -rf $archive_dir
    echo "$save_file"
}

main "$@"
