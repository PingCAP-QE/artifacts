#!/usr/bin/env bash
# Code generated by gomplate, DO NOT EDIT.

set -exo pipefail

function main() {
    local release_ws="$1"
    local need_build="${2:-true}" # true or false
    release_ws=$(realpath $release_ws)

    # >>>>>>>>>>>>>>>> build steps >>>>>>>>>>>>>>>>
    if $need_build; then
{{- range .steps }}
{{ .script | indent 8 }}
{{- end }}
    fi
    # <<<<<<<<<<<<<<<< build steps <<<<<<<<<<<<<<<<

    mkdir -p ${release_ws}
    ################# create tarballs ################
    {{- range (.artifacts | jq `map(select(.type == "file" or .type == null))`) }}
    # >>>>>>>>>>>>>>>> file: {{ .name }} >>>>>>>>>>>>>>>>
    echo "Start composing artifact: {{ .name }} ..."
    local archive_dir="$(mktemp -d -p $release_ws)"

    {{- $files := (.files | jq `map(select(.if != false ))`) -}}
    {{- $localFiles := ($files | jq `map(select(.src.type == "local" or .src.type == null))`) -}}
    {{- $ociFiles := $files | jq `map(select(.src.type == "oci"))` -}}
    {{- $httpFiles := $files | jq `map(select(.src.type == "http"))` -}}

    {{- if gt (len $localFiles) 0 }}
    ## local files
    {{- range $localFiles }}
    # - {{ .name }}
    mkdir -p $(dirname ${archive_dir}/{{ .name }})
    {{- if has .src "extract" }}
    tar -zxvf {{ .src.path }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    mv {{ default "" .src.extract_inner_path }} ${archive_dir}/{{ .name }}
    {{- else }}
    cp -r {{ .src.path }} ${archive_dir}/{{ .name }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if gt (len $ociFiles) 0 }}
    ## compose files from OCI repositories.
    {{- range $ociFiles }}
    # {{ .name }}
    oras pull {{ .src.url }}
    mkdir -p $(dirname ${archive_dir}/{{ .name }})
    {{- if has .src "extract" }}
    tar -zxvf {{ .src.path }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    mv {{ default "" .src.extract_inner_path }} {{ .name }}
    {{- else }}
    cp -r {{ .src.path }} ${archive_dir}/{{ .name }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if gt (len $httpFiles) 0 }}
    ## compose files from http.
    {{- range $httpFiles }}
    # {{ .name }}
    wget {{ .src.url }}
    mkdir -p $(dirname ${archive_dir}/{{ .name }})
    {{- if has .src "extract" }}
    tar -zxvf {{ path.Base .src.url }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    {{- else }}
    cp -r {{ .src.path }} ${archive_dir}/{{ .name }}
    {{- end }}
    {{- end }}
    {{- end }}

    ## archive it
    local save_file="$release_ws/{{ .name }}"
    pushd "$archive_dir"
    tar -zcvf "$save_file"
    {{- range $files }}{{ printf " %s" .name }}{{- end }}
    popd
    rm -rf $archive_dir
    echo "$save_file"
    # <<<<<<<<<<<<<<<< file: {{ .name }} <<<<<<<<<<<<<<<<
    {{- end }}
}

main "$@"
