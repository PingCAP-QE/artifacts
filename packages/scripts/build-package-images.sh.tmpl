#!/bin/sh
# Code generated by gomplate, DO NOT EDIT.

set -exo pipefail

main() {
    release_ws="$1"
    need_build="${2:-false}" # true or false
    kaniko_executor="${3:-/kaniko/executor}"
    mkdir -p ${release_ws}
    release_ws=$(realpath $release_ws)

    if $need_build; then
      build_binaries
    fi

    build_and_push_images
}

build_and_push_images() {
    ################# build and push image ################
    tag="{{ index .artifactory.tags 0 }}-{{ .profile }}-{{ .arch }}"
{{ range (.artifacts | jq `map(select(.type == "image"))`) }}
    # >>>>>>>>>>>>>>>> image: {{ .name }} >>>>>>>>>>>>>>>>
    destination="{{ .artifactory.repo  }}:$tag"
    kaniko_executor_global_options=""

    {{- if has . "context" }}
    # just build it with native build from git repo's dockerfile
    $kaniko_executor $kaniko_executor_global_options --context={{ .context }} --dockerfile={{ .dockerfile }} --destination=${destination}
    {{- else }}

    # Prepare build context for image building.
    echo "Prepare build context for image: $destination ..."
    archive_dir="$release_ws/tmp-$(date +%s)"
    mkdir -p "$archive_dir"


    {{- $files := (.files | jq `map(select(.if != false ))`) -}}
    {{- $localFiles := ($files | jq `map(select(.src.type == "local" or .src.type == null))`) -}}
    {{- $ociFiles := $files | jq `map(select(.src.type == "oci"))` -}}
    {{- $httpFiles := $files | jq `map(select(.src.type == "http"))` -}}

    {{- if gt (len $localFiles) 0 }}
    ## local files
    {{- range $localFiles }}
    # - {{ .name }}
    mkdir -p "$(dirname ${archive_dir}/{{ .name }})"
    {{- if has .src "extract" }}
    tar -zxvf {{ .src.path }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    mv {{ default "" .src.extract_inner_path }} ${archive_dir}/{{ .name }}
    {{- else }}
    cp -r {{ .src.path }} ${archive_dir}/{{ .name }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if gt (len $ociFiles) 0 }}
    ## compose files from OCI repositories.
    {{- range $ociFiles }}
    # {{ .name }}
    oras pull {{ .src.url }}
    mkdir -p $(dirname ${archive_dir}/{{ .name }})
    {{- if has .src "extract" }}
    tar -zxvf {{ .src.path }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    mv {{ default "" .src.extract_inner_path }} {{ .name }}
    {{- else }}
    cp -r {{ .src.path }} ${archive_dir}/{{ .name }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if gt (len $httpFiles) 0 }}
    ## compose files from http.
    {{- range $httpFiles }}
    # {{ .name }}
    wget {{ .src.url }}
    mkdir -p $(dirname ${archive_dir}/{{ .name }})
    {{- if has .src "extract" }}
    tar -zxvf {{ path.Base .src.url }} --strip-components={{ math.Sub (strings.Split `/` (default "" .src.extract_inner_path) | len) 1 }} -C $archive_dir {{ default "" .src.extract_inner_path }}
    {{- else }}
    cp -r {{ .src.path }} ${archive_dir}/{{ .name }}
    {{- end }}
    {{- end }}
    {{- end }}
    ## build and push
    dockerfile="{{ .dockerfile }}"
    # get dockerfile from url if the `.dockerfile` value is a http url.
    if [ "${dockerfile#https://}" != "$dockerfile" ] || [ "${dockerfile#http://}" != "$dockerfile" ]; then
        echo "URL starts with https:// or http://, now I will download it and save it into: '$archive_dir/Dockerfile'."
        wget "$dockerfile" -O "$archive_dir/Dockerfile"
        dockerfile="$archive_dir/Dockerfile"
    fi
    dockerfile="$(realpath $dockerfile)"

    $kaniko_executor $kaniko_executor_global_options --context="$archive_dir" --dockerfile="$dockerfile" --destination=${destination}
    rm -rf $archive_dir
    {{- end }}

    echo "Pushed image: $destination"
    # <<<<<<<<<<<<<<<< image: {{ .name }} <<<<<<<<<<<<<<<<
{{ end }}
    # All done.
}

# >>>>>>>>>>>>>>>> build binaries steps >>>>>>>>>>>>>>>>
build_binaries() {
  {{- $root := . -}}
  {{- range .steps }}
  {{- if or (not (has . "os")) (eq .os $root.os) }}
{{ .script | indent 4 }}
  {{- end }}
  {{- end }}
}

main "$@"
