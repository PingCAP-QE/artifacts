# See README.md
# Hotfix for v6.5.7 series

{{ define "image_dockerfile_folder" -}}
{{- if semver.CheckConstraint "~6.5.12-0 || >6.5.7-0, < 6.5.8-0" . -}}
~6.5.12/
{{- else if semver.CheckConstraint "<6.5.12-0" . -}}
lt6.5.12/
{{- end -}}
{{- end -}}

{{ define "get_monitoring_target_from_git_ref" -}}
{{- if strings.HasPrefix "v" . -}}
{{- $v := semver.Semver . -}}
{{- if and (semver.CheckConstraint ">9.0.0-0" .) (regexp.Match "^v[0-9]+\\.[0-9]+\\.[0-9]+-beta\\.[0-9]+$" .) -}}
{{ printf "release-%d.%d-beta.%s" $v.Major $v.Minor (index (strings.Split "." .) 3) }}
{{- else -}}
{{ printf "release-%d.%d" $v.Major $v.Minor }}
{{- end -}}
{{- else -}}
{{ . }}
{{- end }}
{{- end -}}

components:
  advanced-statefulset:
    desc:
    git:
      url: https://github.com/pingcap/advanced-statefulset.git
      ref: '{{ .Git.ref | default "master" }}'
      sha: '{{ .Git.sha | default "" }}'
    version: {{ .Release.version }} # segment version.
    artifactory:
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - if: {{ semver.CheckConstraint ">= 0.5.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/utils/release:v2024.10.8-55-gdeaa249
    routers:
      - description: Publish route for v0.5.0 and newer versions.
        if: {{ semver.CheckConstraint ">= 0.5.0-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [release]
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/advanced-statefulset"
            context: . # build under git repo.
            dockerfile: Dockerfile
  ctl:
    desc: ctl components
    git:
      url: https://github.com/pingcap/tidb.git
      ref: {{ .Git.ref | default "master" }}
      sha: '{{ .Git.sha | default "" }}'
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/ctl/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - image: ghcr.io/pingcap-qe/cd/utils/release:v2024.10.8-55-gdeaa249
    routers:
      - description: For range [v9.0.0, )
        if: {{ semver.CheckConstraint ">= 9.0.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        artifacts:
          - name: "ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: cdc
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/ticdc/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "cdc-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: cdc
              - name: ctl
                src:
                  type: http
                  url: "https://github.com/pingcap/tiup/releases/download/v1.16.1/tiup-v1.16.1-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: bin/tiup-ctl
              - name: etcdctl
                src:
                  type: http
                  url: "https://github.com/etcd-io/etcd/releases/download/v3.5.15/etcd-v3.5.15-{{ .Release.os }}-{{ .Release.arch }}{{ ternary ".zip" ".tar.gz" (eq .Release.os "darwin") }}"
                  extract: true
                  extract_inner_path: etcd-v3.5.15-{{ .Release.os }}-{{ .Release.arch }}/etcdctl
              - name: pd-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/tikv/pd/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "pd-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: pd-ctl
              - name: tidb-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb-ctl/package:master_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tidb-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tidb-ctl
              - name: tikv-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/tikv/tikv/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tikv-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tikv-ctl
              - name: tidb-lightning-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tidb-lightning-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tidb-lightning-ctl
            tiup:
              description: TiDB controller suite
              entrypoint: ctl
      - description: For range [v8.4.0, v9.0.0)
        if: {{ semver.CheckConstraint ">= 8.4.0-0, < 9.0.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        artifacts:
          - name: "ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: cdc
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tiflow/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "cdc-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: cdc
              - name: ctl
                src:
                  type: http
                  url: "https://github.com/pingcap/tiup/releases/download/v1.16.1/tiup-v1.16.1-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: bin/tiup-ctl
              - name: etcdctl
                src:
                  type: http
                  url: "https://github.com/etcd-io/etcd/releases/download/v3.5.15/etcd-v3.5.15-{{ .Release.os }}-{{ .Release.arch }}{{ ternary ".zip" ".tar.gz" (eq .Release.os "darwin") }}"
                  extract: true
                  extract_inner_path: etcd-v3.5.15-{{ .Release.os }}-{{ .Release.arch }}/etcdctl
              - name: pd-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/tikv/pd/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "pd-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: pd-ctl
              - name: tidb-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb-ctl/package:master_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tidb-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tidb-ctl
              - name: tikv-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/tikv/tikv/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tikv-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tikv-ctl
              - name: tidb-lightning-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tidb-lightning-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tidb-lightning-ctl
            tiup:
              description: TiDB controller suite
              entrypoint: ctl
      - description: For range [v6.1.0, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        artifacts:
          - name: "ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: binlogctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb-binlog/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "binaries-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: binlogctl
              - name: cdc
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tiflow/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "cdc-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: cdc
              - name: ctl
                src:
                  type: http
                  url: "https://github.com/pingcap/tiup/releases/download/v1.8.1/tiup-v1.8.1-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: bin/tiup-ctl
              - name: etcdctl
                src:
                  type: http
                  {{- if eq .Release.os "darwin" }}
                  # ${FILE_SERVER_URL}/download/pingcap/etcd-${ETCDCTL_VERSION}-${os}-${arch}.tar.gz
                  url: "http://fileserver.pingcap.net/download/pingcap/etcd-v3.4.30-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  {{- else }}
                  url: "https://github.com/etcd-io/etcd/releases/download/v3.4.30/etcd-v3.4.30-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  {{- end }}
                  extract: true
                  extract_inner_path: etcd-v3.4.30-{{ .Release.os }}-{{ .Release.arch }}/etcdctl
              - name: pd-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/tikv/pd/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "pd-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: pd-ctl
              - name: tidb-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb-ctl/package:master_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tidb-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tidb-ctl
              - name: tikv-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/tikv/tikv/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tikv-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tikv-ctl
              - name: tidb-lightning-ctl
                src:
                  type: oci
                  url: "{{ .Release.registry }}/pingcap/tidb/package:{{ .Git.ref }}_{{ .Release.os }}_{{ .Release.arch }}"
                  path: "tidb-lightning-ctl-.*-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
                  extract: true
                  extract_inner_path: tidb-lightning-ctl
            tiup:
              description: TiDB controller suite
              entrypoint: ctl
  monitoring:
    desc:
    git:
      url: https://github.com/pingcap/monitoring.git
      ref: '{{ .Git.ref | default "master" }}'
      sha: '{{ .Git.sha | default "" }}'
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/monitoring/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-51-g9b98efb-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 7.4.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.21
      - if: {{ semver.CheckConstraint ">= 7.0.0-0, < 7.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.20
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 7.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.19
      - if: {{ semver.CheckConstraint "< 6.1.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.19
    routers:
      - description: For range [v8.4.0, )
        if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: |-
                export TARGET={{ template "get_monitoring_target_from_git_ref" .Git.ref }}
                export TARGET_OS={{ .Release.os }} TARGET_ARCH={{ .Release.arch }}
                make grafana_without_pull
                make default -C ng-monitoring
                make output/prometheus
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/monitoring/image"
            context: monitor-snapshot/{{ template "get_monitoring_target_from_git_ref" .Git.ref }}/operator/
            dockerfile: Dockerfile
          - name: "grafana-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            src: { path: "output/grafana-{{ .Release.os }}-{{ .Release.arch }}.tar.gz" }
            tiup:
              description: Grafana is the open source analytics & monitoring solution for every database
              entrypoint: bin/grafana-server
          - name: "prometheus-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: ng-monitoring-server
                src:
                  path: ng-monitoring/bin/ng-monitoring-server
              - name: prometheus
                src:
                  path: output/prometheus
            tiup:
              description: The Prometheus monitoring system and time series database
              entrypoint: prometheus/prometheus

      - description: For range [v6.1.0, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: |-
                export TARGET={{ template "get_monitoring_target_from_git_ref" .Git.ref }}
                export TARGET_OS={{ .Release.os }} TARGET_ARCH={{ .Release.arch }}
                make grafana_without_pull
                make default -C ng-monitoring
                make output/prometheus
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/monitoring/image"
            context: monitor-snapshot/{{ template "get_monitoring_target_from_git_ref" .Git.ref }}/operator/
            dockerfile: Dockerfile
          - name: "grafana-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            src: { path: "output/grafana-{{ .Release.os }}-{{ .Release.arch }}.tar.gz" }
            tiup:
              description: Grafana is the open source analytics & monitoring solution for every database
              entrypoint: bin/grafana-server
          - name: "prometheus-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: ng-monitoring-server
                src:
                  path: ng-monitoring/bin/ng-monitoring-server
              - name: prometheus
                src:
                  path: output/prometheus
            tiup:
              description: The Prometheus monitoring system and time series database
              entrypoint: prometheus/prometheus
      - description: For range [v5.3.0, 6.1.0)
        if: {{ semver.CheckConstraint ">= 5.3.0-0, < 6.1.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: |-
                export TARGET={{ template "get_monitoring_target_from_git_ref" .Git.ref }}
                export TARGET_OS={{ .Release.os }} TARGET_ARCH={{ .Release.arch }}
                go run ./cmd/monitoring.go --config=monitoring.yaml --tag={{ .Git.ref }}
                make default -C ng-monitoring
                make output/prometheus
        artifacts:
          - name: "prometheus-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: ng-monitoring-server
                src:
                  path: ng-monitoring/bin/ng-monitoring-server
              - name: prometheus # must be first.
                src:
                  path: output/prometheus
            tiup:
              description: The Prometheus monitoring system and time series database
              entrypoint: prometheus/prometheus
      - description: For range [v5.2.0, v5.3.0)
        if: {{ semver.CheckConstraint "~5.2.0-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: |-
                export TARGET={{ template "get_monitoring_target_from_git_ref" .Git.ref }}
                export TARGET_OS={{ .Release.os }} TARGET_ARCH={{ .Release.arch }}
                go run ./cmd/monitoring.go --config=monitoring.yaml --tag={{ .Git.ref }}
                make output/prometheus
        artifacts:
          - name: "prometheus-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: prometheus # must be first.
                src:
                  path: output/prometheus
            tiup:
              description: The Prometheus monitoring system and time series database
              entrypoint: prometheus/prometheus
  ng-monitoring:
    desc: ng-monitoring component
    git:
      url: https://github.com/pingcap/ng-monitoring.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/ng-monitoring/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-51-g9b98efb-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 7.4.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.21
      - if: {{ semver.CheckConstraint ">= 7.0.0-0, < 7.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.20
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 7.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.19
      - if: {{ semver.CheckConstraint "< 6.1.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ng-monitoring:v2024.10.8-12-gb9ffe36-centos7-go1.19
    routers:
      - description: Range [v8.4.0, )
        if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make default
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/ng-monitoring/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/ng-monitoring/Dockerfile
            files:
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
          - name: "binaries-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
      - description: Range [v6.6, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.6.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make default
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/ng-monitoring/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/ng-monitoring/Dockerfile
            files:
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
          - name: "binaries-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
      - description: For range [v6.5.6, v6.6.0) && fips profile
        if: {{ semver.CheckConstraint "~6.5.6-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [fips]
        steps:
          fips:
            - script: ENABLE_FIPS=1 make default
          release:
            - script: make default
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/ng-monitoring/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/ng-monitoring/Dockerfile
            files:
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
          - name: "binaries-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server

      - description: For range [v5.3.0, v6.6.0)
        if: {{ semver.CheckConstraint ">= 5.3.0-0, < 6.6.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make default
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/ng-monitoring/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/ng-monitoring/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files:
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
          - name: "binaries-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: ng-monitoring-server
                src:
                  path: bin/ng-monitoring-server
  pd:
    desc: pd server component tarball
    git:
      url: https://github.com/tikv/pd.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/tikv/pd/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/pd:v2024.10.8-51-g9b98efb-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 7.4.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/pd:v2024.10.8-12-gb9ffe36-centos7-go1.21
      - if: {{ semver.CheckConstraint ">= 7.0.0-0, < 7.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/pd:v2024.10.8-12-gb9ffe36-centos7-go1.20
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 7.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/pd:v2024.10.8-12-gb9ffe36-centos7-go1.19
      - if: {{ semver.CheckConstraint "< 6.1.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/pd:v20240325-103-g043adb3-go1.18
    routers:
      - description: For range [v8.4.0, )
        if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint]
        steps:
          release:
            - script: make build
          enterprise:
            - script: PD_EDITION=Enterprise make build tools
          failpoint:
            - script: FAILPOINT=1 make failpoint-enable build failpoint-disable
        artifacts:
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-server
                src:
                  path: bin/pd-server
            tiup: # will publish to tiup.
              description: >-
                PD is the abbreviation for Placement Driver.
                It is used to manage and schedule the TiKV cluster.
              entrypoint: pd-server
          - name: "pd-recover-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-recover
                src:
                  path: bin/pd-recover
            tiup:
              description: >-
                PD Recover is a disaster recovery tool of PD, used to recover
                the PD cluster which cannot start or provide services normally.
              entrypoint: pd-recover
          - name: "pd-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-ctl
                src:
                  path: bin/pd-ctl
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - { name: pd-server, src: { path: bin/pd-server } }
              - { name: pd-recover, src: { path: bin/pd-recover } }
              - { name: pd-ctl, src: { path: bin/pd-ctl } }
              - { name: pd-heartbeat-bench, src: { path: bin/pd-heartbeat-bench } }
              - { name: pd-tso-bench, src: { path: bin/pd-tso-bench } }
              - { name: regions-dump, src: { path: bin/regions-dump } }
              - { name: stores-dump, src: { path: bin/stores-dump } }
              - { if: {{ semver.CheckConstraint ">= 7.4.0-0" .Release.version }}, name: pd-api-bench, src: { path: bin/pd-api-bench } }
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/pd/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/pd/Dockerfile
            files: # prepare for context
              - name: pd-server
                src:
                  path: bin/pd-server
              - name: pd-recover
                src:
                  path: bin/pd-recover
              - name: pd-ctl
                src:
                  path: bin/pd-ctl

      - description: For range [v6.6.0, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.6.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint]
        steps:
          release:
            - script: make build
          enterprise:
            - script: PD_EDITION=Enterprise make build tools
          failpoint:
            - script: WITH_RACE=1 FAILPOINT=1 make failpoint-enable build failpoint-disable
        artifacts:
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-server
                src:
                  path: bin/pd-server
            tiup: # will publish to tiup.
              description: >-
                PD is the abbreviation for Placement Driver.
                It is used to manage and schedule the TiKV cluster.
              entrypoint: pd-server
          - name: "pd-recover-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-recover
                src:
                  path: bin/pd-recover
            tiup:
              description: >-
                PD Recover is a disaster recovery tool of PD, used to recover
                the PD cluster which cannot start or provide services normally.
              entrypoint: pd-recover
          - name: "pd-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-ctl
                src:
                  path: bin/pd-ctl
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - { name: pd-server, src: { path: bin/pd-server } }
              - { name: pd-recover, src: { path: bin/pd-recover } }
              - { name: pd-ctl, src: { path: bin/pd-ctl } }
              - { name: pd-heartbeat-bench, src: { path: bin/pd-heartbeat-bench } }
              - { name: pd-tso-bench, src: { path: bin/pd-tso-bench } }
              - { name: regions-dump, src: { path: bin/regions-dump } }
              - { name: stores-dump, src: { path: bin/stores-dump } }
              - { if: {{ semver.CheckConstraint ">= 7.4.0-0" .Release.version }}, name: pd-api-bench, src: { path: bin/pd-api-bench } }
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/pd/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/pd/Dockerfile
            files: # prepare for context
              - name: pd-server
                src:
                  path: bin/pd-server
              - name: pd-recover
                src:
                  path: bin/pd-recover
              - name: pd-ctl
                src:
                  path: bin/pd-ctl
      - description: For range [6.5.6, 6.6.0) && fips profile
        if: {{ semver.CheckConstraint "~6.5.6-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [fips]
        steps:
          fips:
            - script: ENABLE_FIPS=1 make build
        artifacts:
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: pd-server
                src:
                  path: bin/pd-server
          - name: "pd-recover-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: pd-recover
                src:
                  path: bin/pd-recover
            tiup:
              description: >-
                PD Recover is a disaster recovery tool of PD, used to recover
                the PD cluster which cannot start or provide services normally.
              entrypoint: pd-recover
          - name: "pd-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: pd-ctl
                src:
                  path: bin/pd-ctl
          - name: fips container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/pd/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/pd/Dockerfile
            files: # prepare for context
              - name: pd-server
                src:
                  path: bin/pd-server
              - name: pd-recover
                src:
                  path: bin/pd-recover
              - name: pd-ctl
                src:
                  path: bin/pd-ctl
      - description: For range [6.1.0, 6.6.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 6.6.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint]
        steps:
          release:
            - script: make build
          enterprise:
            - script: PD_EDITION=Enterprise make build tools
          failpoint:
            - script: WITH_RACE=1 FAILPOINT=1 make failpoint-enable build failpoint-disable
        artifacts:
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-server
                src:
                  path: bin/pd-server
            tiup: # will publish to tiup.
              description: >-
                PD is the abbreviation for Placement Driver.
                It is used to manage and schedule the TiKV cluster.
              entrypoint: pd-server
          - name: "pd-recover-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-recover
                src:
                  path: bin/pd-recover
            tiup:
              description: >-
                PD Recover is a disaster recovery tool of PD, used to recover
                the PD cluster which cannot start or provide services normally.
              entrypoint: pd-recover
          - name: "pd-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - name: pd-ctl
                src:
                  path: bin/pd-ctl
          - name: "pd-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - { name: pd-server, src: { path: bin/pd-server } }
              - { name: pd-recover, src: { path: bin/pd-recover } }
              - { name: pd-ctl, src: { path: bin/pd-ctl } }
              - { name: pd-heartbeat-bench, src: { path: bin/pd-heartbeat-bench } }
              - { name: pd-tso-bench, src: { path: bin/pd-tso-bench } }
              - { name: regions-dump, src: { path: bin/regions-dump } }
              - { name: stores-dump, src: { path: bin/stores-dump } }
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/pd/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/pd/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files: # prepare for context
              - { name: pd-server, src: { path: bin/pd-server } }
              - { name: pd-ctl, src: { path: bin/pd-ctl } }
              - { name: pd-recover, src: { path: bin/pd-recover } }
  tidb:
    desc: tidb server component tarball
    git:
      url: https://github.com/pingcap/tidb.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tidb/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-129-ga6c42c5-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 7.4.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.21
      - if: {{ semver.CheckConstraint ">= 7.0.0-0, < 7.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.20
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 7.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.19
      - if: {{ semver.CheckConstraint "< 6.1.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v20240325-103-g043adb3-go1.18
    routers:
      - description: For range [v8.4.0, )
        # fips profile only invalid in v6.5.x
        if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, enterprise-without-plugins, failpoint, next-gen]
        steps:
          release:
            - script: |
                make server build_tools build_dumpling
          enterprise:
            - script: |
                TIDB_EDITION=Enterprise make enterprise-prepare enterprise-server-build build_tools build_dumpling
            - script: |
                # git checkout the enterprise-plugin code.
                {{- if (.Git.ref | regexp.Match `^feature/release-[0-9]+\.[0-9]+`) }}
                {{ $sv := semver.Semver .Release.version -}}
                # plugin_branch="{{ printf "release-%d.%d" $sv.Major $sv.Minor }}"
                {{- else if (.Git.ref | default "master" | regexp.Match `^(master|main|feature/.*)`) }}
                # plugin_branch="master"
                {{- else }}
                {{ $sv := semver.Semver .Release.version -}}
                # plugin_branch="{{ printf "release-%d.%d" $sv.Major $sv.Minor }}"
                {{- end }}
                # git clone https://github.com/pingcap-inc/enterprise-plugin.git -b "$plugin_branch" ../enterprise-plugin
            - script: |
                # go plugin audit
                pushd ../enterprise-plugin/audit && go mod tidy &&  popd
                go run ./cmd/pluginpkg -pkg-dir ../enterprise-plugin/audit -out-dir bin/
            - script: |
                # go plugin whitelist
                pushd ../enterprise-plugin/whitelist && go mod tidy &&  popd
                go run ./cmd/pluginpkg -pkg-dir ../enterprise-plugin/whitelist -out-dir bin/
          enterprise-without-plugins:
            - script: |
                TIDB_EDITION=Enterprise make enterprise-prepare enterprise-server-build build_tools build_dumpling
          failpoint:
            - script: |
                make failpoint-enable
                make server build_tools build_dumpling # failpoint
                make failpoint-disable
          next-gen: # only since v9.0.0
            - script: |
                NEXT_GEN=1 TIDB_EDITION=Enterprise make enterprise-prepare enterprise-server-build build_tools build_dumpling
        artifacts:
          - name: "plugins-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - name: whitelist-1.so
                src:
                  path: bin/whitelist-1.so
              - name: audit-1.so
                src:
                  path: bin/audit-1.so
          - name: "tidb-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-server
                src:
                  path: bin/tidb-server
            tiup:
              description: >-
                TiDB is an open source distributed HTAP database compatible with the MySQL protocol.
              entrypoint: tidb-server
          - name: "br-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: br
                src:
                  path: bin/br
            tiup:
              description: >-
                TiDB/TiKV cluster backup restore tool.
              standalone: true
              entrypoint: br
          - name: "dumpling-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dumpling
                src:
                  path: bin/dumpling
            tiup:
              entrypoint: dumpling
              description: >-
                Dumpling is a CLI tool that helps you dump MySQL/TiDB data.
          - name: "tidb-lightning-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-lightning-ctl
                src:
                  path: bin/tidb-lightning-ctl
          - name: "tidb-lightning-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-lightning
                src:
                  path: bin/tidb-lightning
            tiup:
              description: >-
                TiDB Lightning is a tool used for fast full import of large amounts of data into a TiDB cluster
              entrypoint: tidb-lightning
              standalone: true
          - name: container image - tidb server
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-server"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ ternary "tidb.enterprise.Dockerfile" "tidb.Dockerfile" (eq .Release.profile "enterprise") }}
            files: # prepare for context
              - name: tidb-server
                src:
                  path: bin/tidb-server
              - name: audit-1.so
                if: {{ eq "enterprise" .Release.profile }}
                src:
                  path: bin/audit-1.so
              - name: whitelist-1.so
                if: {{ eq "enterprise" .Release.profile }}
                src:
                  path: bin/whitelist-1.so
          - name: container image - br tool
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/br"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/br.Dockerfile
            files: # prepare for context
              - name: br
                src:
                  path: bin/br
          - name: container image - dumpling tool
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/dumpling"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/dumpling.Dockerfile
            files: # prepare for context
              - name: dumpling
                src:
                  path: bin/dumpling
          - name: container image - tidb-lightning
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-lightning"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/tidb-lightning.Dockerfile
            files: # prepare for context
              - name: tidb-lightning
                src:
                  path: bin/tidb-lightning
              - name: tidb-lightning-ctl
                src:
                  path: bin/tidb-lightning-ctl
      - description: For range [v7.1.0, v8.4.0)
        # fips profile only invalid in v6.5.x
        if: {{ semver.CheckConstraint ">= 7.1.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, enterprise-without-plugins, failpoint]
        steps:
          release:
            - script: |
                make server build_tools build_dumpling
          enterprise:
            - script: |
                TIDB_EDITION=Enterprise make enterprise-prepare enterprise-server-build build_tools build_dumpling
            - script: |
                # git checkout the enterprise-plugin code.
                {{- if (.Git.ref | regexp.Match `^feature/release-[0-9]+\.[0-9]+`) }}
                {{ $sv := semver.Semver .Release.version -}}
                # plugin_branch="{{ printf "release-%d.%d" $sv.Major $sv.Minor }}"
                {{- else if (.Git.ref | default "master" | regexp.Match `^(master|main|feature/.*)`) }}
                # plugin_branch="master"
                {{- else }}
                {{ $sv := semver.Semver .Release.version -}}
                # plugin_branch="{{ printf "release-%d.%d" $sv.Major $sv.Minor }}"
                {{- end }}
                # git clone https://github.com/pingcap-inc/enterprise-plugin.git -b "$plugin_branch" ../enterprise-plugin
            - script: |
                # go plugin audit
                pushd ../enterprise-plugin/audit && go mod tidy &&  popd
                go run ./cmd/pluginpkg -pkg-dir ../enterprise-plugin/audit -out-dir bin/
            - script: |
                # go plugin whitelist
                pushd ../enterprise-plugin/whitelist && go mod tidy &&  popd
                go run ./cmd/pluginpkg -pkg-dir ../enterprise-plugin/whitelist -out-dir bin/
          enterprise-without-plugins:
            - script: |
                TIDB_EDITION=Enterprise make enterprise-prepare enterprise-server-build build_tools build_dumpling
          failpoint:
            - script: |
                make failpoint-enable
                WITH_RACE=1 make server build_tools build_dumpling # failpoint
                make failpoint-disable
        artifacts:
          - name: "plugins-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - name: whitelist-1.so
                src:
                  path: bin/whitelist-1.so
              - name: audit-1.so
                src:
                  path: bin/audit-1.so
          - name: "tidb-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-server
                src:
                  path: bin/tidb-server
            tiup:
              description: >-
                TiDB is an open source distributed HTAP database compatible with the MySQL protocol.
              entrypoint: tidb-server
          - name: "br-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: br
                src:
                  path: bin/br
            tiup:
              description: >-
                TiDB/TiKV cluster backup restore tool.
              standalone: true
              entrypoint: br
          - name: "dumpling-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dumpling
                src:
                  path: bin/dumpling
            tiup:
              entrypoint: dumpling
              description: >-
                Dumpling is a CLI tool that helps you dump MySQL/TiDB data.
          - name: "tidb-lightning-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-lightning-ctl
                src:
                  path: bin/tidb-lightning-ctl
          - name: "tidb-lightning-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-lightning
                src:
                  path: bin/tidb-lightning
            tiup:
              description: >-
                TiDB Lightning is a tool used for fast full import of large amounts of data into a TiDB cluster
              entrypoint: tidb-lightning
              standalone: true
          - name: container image - tidb server
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-server"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ ternary "tidb.enterprise.Dockerfile" "tidb.Dockerfile" (eq .Release.profile "enterprise") }}
            files: # prepare for context
              - name: tidb-server
                src:
                  path: bin/tidb-server
              - name: audit-1.so
                if: {{ eq "enterprise" .Release.profile }}
                src:
                  path: bin/audit-1.so
              - name: whitelist-1.so
                if: {{ eq "enterprise" .Release.profile }}
                src:
                  path: bin/whitelist-1.so
          - name: container image - br tool
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/br"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/br.Dockerfile
            files: # prepare for context
              - name: br
                src:
                  path: bin/br
          - name: container image - dumpling tool
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/dumpling"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/dumpling.Dockerfile
            files: # prepare for context
              - name: dumpling
                src:
                  path: bin/dumpling
          - name: container image - tidb-lightning
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-lightning"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/tidb-lightning.Dockerfile
            files: # prepare for context
              - name: tidb-lightning
                src:
                  path: bin/tidb-lightning
              - name: tidb-lightning-ctl
                src:
                  path: bin/tidb-lightning-ctl
      - description: For range [v6.1.0, v7.1.0)
        # fips profile only invalid in v6.5.x
        if: {{ or (semver.CheckConstraint ">= 6.1.0-0, < 7.1.0-0" .Release.version) (and (semver.CheckConstraint "~6.5.0-0" .Release.version)) (eq "fips" .Release.profile) }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, failpoint, fips, enterprise]
        steps:
          release:
            - script: |
                make server build_tools build_dumpling
          enterprise:
            - script: |
                TIDB_EDITION=Enterprise make server build_tools build_dumpling
            - script: |
                # git checkout the enterprise-plugin code.
                {{- if (.Git.ref | regexp.Match `^feature/release-[0-9]+\.[0-9]+`) }}
                {{ $sv := semver.Semver .Release.version -}}
                # plugin_branch="{{ printf "release-%d.%d" $sv.Major $sv.Minor }}"
                {{- else if (.Git.ref | default "master" | regexp.Match `^(master|main|feature/.*)`) }}
                # plugin_branch="master"
                {{- else }}
                {{ $sv := semver.Semver .Release.version -}}
                # plugin_branch="{{ printf "release-%d.%d" $sv.Major $sv.Minor }}"
                {{- end }}
                # git clone https://github.com/pingcap-inc/enterprise-plugin.git -b "$plugin_branch" ../enterprise-plugin
            - script: |
                # go plugin audit
                pushd ../enterprise-plugin/audit && go mod tidy &&  popd
                go run ./cmd/pluginpkg -pkg-dir ../enterprise-plugin/audit -out-dir bin/
            - script: |
                # go plugin whitelist
                pushd ../enterprise-plugin/whitelist && go mod tidy &&  popd
                go run ./cmd/pluginpkg -pkg-dir ../enterprise-plugin/whitelist -out-dir bin/
          failpoint:
            - script: |
                make failpoint-enable
                WITH_RACE=1 make server build_tools build_dumpling # failpoint
                make failpoint-disable
          fips:
            - script: ENABLE_FIPS=1 make server build_tools build_dumpling
        artifacts:
          - name: "plugins-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - name: whitelist-1.so
                src:
                  path: bin/whitelist-1.so
              - name: audit-1.so
                src:
                  path: bin/audit-1.so
          - name: "tidb-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-server
                src:
                  path: bin/tidb-server
            tiup:
              description: >-
                TiDB is an open source distributed HTAP database compatible with the MySQL protocol.
              entrypoint: tidb-server
          - name: "br-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: br
                src:
                  path: bin/br
            tiup:
              description: >-
                TiDB/TiKV cluster backup restore tool.
              standalone: true
              entrypoint: br
          - name: "dumpling-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dumpling
                src:
                  path: bin/dumpling
            tiup:
              entrypoint: dumpling
              description: >-
                Dumpling is a CLI tool that helps you dump MySQL/TiDB data.
          - name: "tidb-lightning-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-lightning-ctl
                src:
                  path: bin/tidb-lightning-ctl
          - name: "tidb-lightning-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-lightning
                src:
                  path: bin/tidb-lightning
            tiup:
              description: >-
                TiDB Lightning is a tool used for fast full import of large amounts of data into a TiDB cluster
              entrypoint: tidb-lightning
              standalone: true
          - name: container image - tidb server
            if: {{ ne "enterprise" .Release.profile }}
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-server"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ template "image_dockerfile_folder" .Release.version }}tidb.Dockerfile
            files: # prepare for context
              - name: tidb-server
                src:
                  path: bin/tidb-server
          - name: container image - tidb server enterprise edition
            if: {{ eq "enterprise" .Release.profile }}
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-server"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ template "image_dockerfile_folder" .Release.version }}tidb.enterprise.Dockerfile
            files: # prepare for context
              - name: tidb-server
                src:
                  path: bin/tidb-server
              - name: audit-1.so
                src:
                  path: bin/audit-1.so
              - name: whitelist-1.so
                src:
                  path: bin/whitelist-1.so
          - name: container image - br tool
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/br"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ template "image_dockerfile_folder" .Release.version }}br.Dockerfile
            files: # prepare for context
              - name: br
                src:
                  path: bin/br
          - name: container image - dumpling tool
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/dumpling"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ template "image_dockerfile_folder" .Release.version }}dumpling.Dockerfile
            files: # prepare for context
              - name: dumpling
                src:
                  path: bin/dumpling
          - name: container image - tidb-lightning
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb/images/tidb-lightning"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb/{{ template "image_dockerfile_folder" .Release.version }}tidb-lightning.Dockerfile
            files: # prepare for context
              - name: tidb-lightning
                src:
                  path: bin/tidb-lightning
              - name: tidb-lightning-ctl
                src:
                  path: bin/tidb-lightning-ctl
              - name: br
                if: {{ semver.CheckConstraint "< 6.6.0-0" .Release.version }}
                src: { path: bin/br }
  tidb-tools:
    desc: tidb tools component tarball
    git:
      url: https://github.com/pingcap/tidb-tools.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tidb-tools/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      # BUG: tidb-tools has not release branches and all tags taged on master branch.
      - if: {{ eq "experiment" .Release.profile }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-51-g7bd274e-go1.23
      - if: {{ ne "experiment" .Release.profile }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.21
    routers:
      - description: >
            for range [6.1.0, v9.0.0), it stop at v8.5.1. sync diff inspector tool is migrate to pingcap/tiflow repo.
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < v9.0.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, experiment]
        steps:
          release:
            - script: make sync_diff_inspector
          experiment:
            - script: make sync_diff_inspector
        artifacts:
          - name: "tidb-tools-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: sync_diff_inspector
                src:
                  path: bin/sync_diff_inspector
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-tools/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb-tools/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files:
              - name: sync_diff_inspector
                src:
                  path: bin/sync_diff_inspector
  tidb-ctl:
    desc: tidb ctl component tarball
    git:
      url: https://github.com/pingcap/tidb-ctl.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tidb-ctl/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      # BUG: tidb-ctl has not release branches and all tags taged on master branch.
      - if: (eq "experiment" .Release.profile)
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-129-ga6c42c5-centos7-go1.23
      - if: (ne "experiment" .Release.profile)
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.21
    routers:
      - description: For all versions.
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, experiment]
        steps:
          release:
            - script: make
          experiment:
            - script: make
        artifacts:
          - name: "tidb-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tidb-ctl
                src:
                  path: tidb-ctl
  tidb-binlog:
    desc: |-
      [Deprecated] Delcared Deprecation in v8.3.0, removed in v8.4.0
      tidb binlog component tarball
    git:
      url: https://github.com/pingcap/tidb-binlog.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tidb-binlog/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 7.4.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.21
      - if: {{ semver.CheckConstraint ">= 7.0.0-0, < 7.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.20
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 7.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.19
      - if: {{ semver.CheckConstraint "< 6.1.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v20240325-103-g043adb3-go1.18
    routers:
      - description: interpret versions according to semantic version spec.
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make build
        artifacts:
          - name: "binaries-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            not_tiup: true # docker only
            files: # output files.
              - name: pump
                src:
                  path: bin/pump
              - name: drainer
                src:
                  path: bin/drainer
              - name: reparo
                src:
                  path: bin/reparo
              - name: arbiter
                if: {{ semver.CheckConstraint "< 8.1.1-0 || >= 8.2.0-0" .Release.version }}
                src:
                  path: bin/arbiter
              - name: binlogctl
                src:
                  path: bin/binlogctl
          - name: "drainer-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: drainer
                src:
                  path: bin/drainer
            tiup:
              description: The drainer componet of TiDB binlog service
              entrypoint: drainer
          - name: "pump-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: pump
                src:
                  path: bin/pump
            tiup:
              description: The pump componet of TiDB binlog service
              entrypoint: pump
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-binlog/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb-binlog/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files: # context files
              - name: pump
                src:
                  path: bin/pump
              - name: drainer
                src:
                  path: bin/drainer
              - name: reparo
                src:
                  path: bin/reparo
              - name: binlogctl
                src:
                  path: bin/binlogctl
  tidb-operator:
    desc: tidb opreator component tarball
    git:
      url: https://github.com/pingcap/tidb-operator.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tidb-operator/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - if: {{ semver.CheckConstraint ">= 1.6.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb-operator:v2024.10.8-51-g9b98efb-go1.23
      - if: {{ semver.CheckConstraint "< 1.6.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb-operator:v2024.10.8-14-g52a7228-go1.21
    routers:
      - description: for range [v2.0.0, )
        if: {{ semver.CheckConstraint ">= 2.0.0-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make build
        artifacts:
          - name: container image - tidb-operator
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/tidb-operator"
            context: .
            dockerfile: image/Dockerfile
            target: tidb-operator # target build stage in Dockerfile
          - name: container image - prestop-checker
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/prestop-checker"
            context: .
            dockerfile: image/Dockerfile
            target: prestop-checker # target build stage in Dockerfile
          - name: container image - tidb-backup-manager
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/tidb-backup-manager"
            context: .
            dockerfile: image/Dockerfile
            target: tidb-backup-manager # target build stage in Dockerfile
      - description: for range [v1.5.0, v2.0.0)
        if: {{ semver.CheckConstraint ">= 1.5.0-0, < 2.0.0-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [release, fips]
        steps:
          release:
            - script: make build
          fips:
            - script: ENABLE_FIPS=1 make build
        artifacts:
          - name: "tidb-operator-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-scheduler
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-scheduler
              - name: tidb-discovery
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-discovery
              - name: tidb-controller-manager
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-controller-manager
              - name: tidb-admission-webhook
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-admission-webhook
          - name: "tidb-backup-manager-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-backup-manager
                src:
                  path: images/tidb-backup-manager/bin/{{ .Release.arch }}/tidb-backup-manager
          - name: "br-federation-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: br-federation-manager
                src:
                  path: images/br-federation-manager/bin/{{ .Release.arch }}/br-federation-manager
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/tidb-operator"
            build_args:
              - TARGETARCH={{ .Release.arch }}
            context: images/tidb-operator
            dockerfile: Dockerfile
          - name: container image - tidb-backup-manager
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/tidb-backup-manager"
            build_args:
              - TARGETARCH={{ .Release.arch }}
            context: images/tidb-backup-manager
            dockerfile: Dockerfile
      - description: before 1.5.0
        if: {{ semver.CheckConstraint "< 1.5.0-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make build
        artifacts:
          - name: "tidb-operator-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-scheduler
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-scheduler
              - name: tidb-discovery
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-discovery
              - name: tidb-controller-manager
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-controller-manager
              - name: tidb-admission-webhook
                src:
                  path: images/tidb-operator/bin/{{ .Release.arch }}/tidb-admission-webhook
          - name: "tidb-backup-manager-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: tidb-backup-manager
                src:
                  path: images/tidb-backup-manager/bin/{{ .Release.arch }}/tidb-backup-manager
          - name: container image - tidb-operator
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/tidb-operator"
            build_args:
              - TARGETARCH={{ .Release.arch }}
            context: images/tidb-operator
            dockerfile: Dockerfile
          - name: container image - tidb-backup-manager
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-operator/images/tidb-backup-manager"
            build_args:
              - TARGETARCH={{ .Release.arch }}
            context: images/tidb-backup-manager
            dockerfile: Dockerfile
  tidb-dashboard:
    desc: ''
    git:
      url: https://github.com/pingcap/tidb-dashboard.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tidb-dashboard/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb-dashboard:v2024.10.8-51-g9b98efb-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 6.5.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb-dashboard:v2024.10.8-12-gb9ffe36-centos7-go1.21
    routers:
      - description: For range [v8.4.0, )
        if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make package
        artifacts:
          - name: "tidb-dashboard-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
            tiup:
              description: TiDB Dashboard is a Web UI for monitoring, diagnosing, and managing the TiDB cluster
              entrypoint: tidb-dashboard
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-dashboard/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb-dashboard/Dockerfile
            files: # prepare for context
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
      - description: For range [v6.6.0, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.6.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make package
        artifacts:
          - name: "tidb-dashboard-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
            tiup:
              description: TiDB Dashboard is a Web UI for monitoring, diagnosing, and managing the TiDB cluster
              entrypoint: tidb-dashboard
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-dashboard/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb-dashboard/Dockerfile
            files: # prepare for context
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
      - description: For range [v6.1.0, v6.6.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 6.6.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make package
        artifacts:
          - name: "tidb-dashboard-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
            tiup:
              description: TiDB Dashboard is a Web UI for monitoring, diagnosing, and managing the TiDB cluster
              entrypoint: tidb-dashboard
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-dashboard/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb-dashboard/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files: # prepare for context
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
      - description: For range [v6.5.4, v6.6.0) && fips profile
        if: {{ and (eq .Release.profile "fips") (semver.CheckConstraint "~6.5.4-0" .Release.version) }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [fips]
        steps:
          fips:
            - script: ENABLE_FIPS=1 make package
        artifacts:
          - name: "tidb-dashboard-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tidb-dashboard/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tidb-dashboard/Dockerfile
            files: # prepare for context
              - name: tidb-dashboard
                src:
                  path: bin/tidb-dashboard
  tiflash:
    desc: tiflash components tarball
    git:
      url: https://github.com/pingcap/tiflash.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tiflash/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - if: {{ semver.CheckConstraint ">= 8.2.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tiflash:v2024.10.8-135-g43bfc3c-centos7
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 8.2.0-0" .Release.version }}
        image: hub.pingcap.net/ee/ci/release-build-base-tiflash:v20231106
    routers:
      - description: For range [v8.5.0, ) it changed the build script path.
        if: {{ semver.CheckConstraint ">= 8.5.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint, next-gen]
        steps:
          release:
            - os: linux
              script: |
                ./release-linux-llvm/scripts/build-release.sh
                mkdir outputs
                mv release-linux-llvm/tiflash outputs/tiflash
            - os: darwin
              script: |
                ./release-darwin/build/build-release.sh
                mkdir outputs
                mv release-darwin/tiflash outputs/tiflash
          enterprise:
            - script: export TIFLASH_EDITION=Enterprise
            - os: linux
              script: |
                ./release-linux-llvm/scripts/build-release.sh
                mkdir outputs
                mv release-linux-llvm/tiflash outputs/tiflash
          failpoint:
            - os: linux
              script: |
                ./release-linux-llvm/scripts/build-debug.sh
                mkdir outputs
                mv release-linux-llvm/tiflash outputs/tiflash
          next-gen:
            - os: linux
              script: |
                ./release-linux-llvm/scripts/build-release.sh
                mkdir outputs
                mv release-linux-llvm/tiflash outputs/tiflash
        artifacts:
          - name: "tiflash-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tiflash/
                src:
                  path: outputs/tiflash/
            tiup:
              description: The TiFlash Columnar Storage Engine
              entrypoint: tiflash/tiflash
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflash/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflash/Dockerfile
            files:
              - name: tiflash/
                src:
                  path: outputs/tiflash/
      - description: For v8.4.x
        if: {{ semver.CheckConstraint "~8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint]
        steps:
          release:
            - os: linux
              script: |
                ./release-centos7-llvm/scripts/build-release.sh
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
            - os: darwin
              script: |
                ./release-darwin/build/build-release.sh
                mkdir outputs
                mv release-darwin/tiflash outputs/tiflash
          enterprise:
            - script: export TIFLASH_EDITION=Enterprise
            - os: linux
              script: |
                ./release-centos7-llvm/scripts/build-release.sh
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
          failpoint:
            - os: linux
              script: |
                ./release-centos7-llvm/scripts/build-debug.sh
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
        artifacts:
          - name: "tiflash-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tiflash/
                src:
                  path: outputs/tiflash/
            tiup:
              description: The TiFlash Columnar Storage Engine
              entrypoint: tiflash/tiflash
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflash/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflash/Dockerfile
            files:
              - name: tiflash/
                src:
                  path: outputs/tiflash/
      - description: For range [v6.2.0, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.2.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint]
        steps:
          release:
            - os: darwin
              script: |
                ./release-darwin/build/build-release.sh
            - os: darwin
              script: |
                mkdir outputs
                mv release-darwin/tiflash outputs/tiflash
            - os: linux
              script: |
                # Create new build script to take advantage of ccache
                mkdir -p build
                cp -r release-centos7-llvm/scripts build/
                sed -i  '/-GNinja/i  \ \ -DUSE_INTERNAL_TIFLASH_PROXY=0 \\\n\ \ -DPREBUILT_LIBS_ROOT=contrib/tiflash-proxy/ \\' build/scripts/build-tiflash-release.sh
            - os: linux
              script: |
                # Build with ccache tool
                mkdir -p /usr/lib64/ccache/bin/
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang++

                ccache -z

                PATH="/usr/lib64/ccache/bin:/opt/cmake/bin:${PATH}:/usr/local/go/bin:/root/.cargo/bin" \
                CC=clang \
                CXX=clang++ \
                LD=ld.lld \
                build/scripts/build-release.sh

                # debug it.
                ccache -s
            - os: linux
              description: move the building targets outputs to the constant path.
              script: |
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
          enterprise:
            - script: export TIFLASH_EDITION=Enterprise
            - os: linux
              script: |
                # Create new build script to take advantage of ccache
                mkdir -p build
                cp -r release-centos7-llvm/scripts build/
                sed -i  '/-GNinja/i  \ \ -DUSE_INTERNAL_TIFLASH_PROXY=0 \\\n\ \ -DPREBUILT_LIBS_ROOT=contrib/tiflash-proxy/ \\' build/scripts/build-tiflash-release.sh
            - os: linux
              script: |
                # Build with ccache tool
                mkdir -p /usr/lib64/ccache/bin/
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang++

                ccache -z

                PATH="/usr/lib64/ccache/bin:/opt/cmake/bin:${PATH}:/usr/local/go/bin:/root/.cargo/bin" \
                CC=clang \
                CXX=clang++ \
                LD=ld.lld \
                build/scripts/build-release.sh

                # debug it.
                ccache -s
            - os: linux
              description: move the building targets outputs to the constant path.
              script: |
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
          failpoint:
            - os: linux
              script: |
                # Create new build script to take advantage of ccache
                mkdir -p build
                cp -r release-centos7-llvm/scripts build/
                sed -i  '/-GNinja/i  \ \ -DUSE_INTERNAL_TIFLASH_PROXY=0 \\\n\ \ -DPREBUILT_LIBS_ROOT=contrib/tiflash-proxy/ \\' build/scripts/build-tiflash-release.sh
            - os: linux
              script: |
                # Build with ccache tool
                mkdir -p /usr/lib64/ccache/bin/
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang++

                ccache -z

                PATH="/usr/lib64/ccache/bin:/opt/cmake/bin:${PATH}:/usr/local/go/bin:/root/.cargo/bin" \
                CC=clang \
                CXX=clang++ \
                LD=ld.lld \
                build/scripts/build-debug.sh

                # debug it.
                ccache -s
            - os: linux
              description: move the building targets outputs to the constant path.
              script: |
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
        artifacts:
          - name: "tiflash-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tiflash/
                src:
                  path: outputs/tiflash/
            tiup:
              description: The TiFlash Columnar Storage Engine
              entrypoint: tiflash/tiflash
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflash/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflash/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files:
              - name: tiflash/
                src:
                  path: outputs/tiflash/
      - description: For range [v6.1.0, v6.2.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 6.2.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise]
        steps:
          release:
            - os: darwin
              script: |
                ./release-darwin/build/build-release.sh
            - os: darwin
              script: |
                mkdir outputs
                mv release-darwin/tiflash outputs/tiflash
            - os: linux
              script: |
                # Create new build script to take advantage of ccache
                mkdir -p build
                cp -r release-centos7-llvm/scripts build/
                sed -i  '/-GNinja/i  \ \ -DUSE_INTERNAL_TIFLASH_PROXY=0 \\\n\ \ -DPREBUILT_LIBS_ROOT=contrib/tiflash-proxy/ \\' build/scripts/build-tiflash-release.sh
            - os: linux
              script: |
                # Build with ccache tool
                mkdir -p /usr/lib64/ccache/bin/
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang++

                ccache -z

                PATH="/usr/lib64/ccache/bin:/opt/cmake/bin:${PATH}:/usr/local/go/bin:/root/.cargo/bin" \
                CC=clang \
                CXX=clang++ \
                LD=ld.lld \
                build/scripts/build-release.sh

                # debug it.
                ccache -s
            - os: linux
              description: move the building targets outputs to the constant path.
              script: |
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
          enterprise:
            - script: export TIFLASH_EDITION=Enterprise
            - os: linux
              script: |
                # Create new build script to take advantage of ccache
                mkdir -p build
                cp -r release-centos7-llvm/scripts build/
                sed -i  '/-GNinja/i  \ \ -DUSE_INTERNAL_TIFLASH_PROXY=0 \\\n\ \ -DPREBUILT_LIBS_ROOT=contrib/tiflash-proxy/ \\' build/scripts/build-tiflash-release.sh
            - os: linux
              script: |
                # Build with ccache tool
                mkdir -p /usr/lib64/ccache/bin/
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang
                ln -s $(which ccache) /usr/lib64/ccache/bin/clang++

                ccache -z

                PATH="/usr/lib64/ccache/bin:/opt/cmake/bin:${PATH}:/usr/local/go/bin:/root/.cargo/bin" \
                CC=clang \
                CXX=clang++ \
                LD=ld.lld \
                build/scripts/build-release.sh

                # debug it.
                ccache -s
            - os: linux
              description: move the building targets outputs to the constant path.
              script: |
                mkdir outputs
                mv release-centos7-llvm/tiflash outputs/tiflash
        artifacts:
          - name: "tiflash-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files: # output files.
              - name: tiflash/
                src:
                  path: outputs/tiflash/
            tiup:
              description: The TiFlash Columnar Storage Engine
              entrypoint: tiflash/tiflash
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflash/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflash/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files:
              - name: tiflash/
                src:
                  path: outputs/tiflash/
  tiflow:
    desc: tiflow components
    git:
      url: https://github.com/pingcap/tiflow.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tiflow/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tiflow:v2024.10.8-51-g9b98efb-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 7.4.0-0, < 8.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tiflow:v2024.10.8-12-gb9ffe36-centos7-go1.21
      - if: {{ semver.CheckConstraint ">= 7.0.0-0, < 7.4.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tiflow:v2024.10.8-12-gb9ffe36-centos7-go1.20
      - if: {{ semver.CheckConstraint ">= 6.1.0-0, < 7.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tiflow:v2024.10.8-12-gb9ffe36-centos7-go1.19
      - if: {{ semver.CheckConstraint "< 6.1.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tiflow:v20240325-103-g043adb3-go1.18
    routers:
      - description: |
            For range [v9.0.0, ). Since v9.0.0 we build and publish cdc components from `pingcap/ticdc` repository.
        if: {{ semver.CheckConstraint ">= v9.0.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - os: darwin
              description: install nodejs toolchain.
              script: |
                NODE_VERSION="v16.20.2"
                NVM_VERSION="v0.39.5"
                NVM_DIR="$HOME/.nvm"
                mkdir -p $NVM_DIR

                if [ ! -s "$NVM_DIR/nvm.sh" ]; then
                  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash
                fi
                . $NVM_DIR/nvm.sh
                nvm install ${NODE_VERSION}
                nvm use ${NODE_VERSION}
                nvm alias default ${NODE_VERSION}

                node --version && npm --version
                npm install -g yarn
            - script: |
                make dm-master-with-webui dm-worker dmctl dm-syncer sync-diff-inspector
        artifacts:
          - name: "dm-master-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dm-master/dm-master
                src:
                  path: bin/dm-master
              - name: dm-master/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dm-master/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dm-master/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dm-master component of Data Migration Platform.
              entrypoint: dm-master/dm-master
          - name: "dm-worker-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dm-worker/dm-worker
                src:
                  path: bin/dm-worker
              - name: dm-worker/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dm-worker/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dm-worker/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dm-worker component of Data Migration Platform.
              entrypoint: dm-worker/dm-worker
          - name: "dmctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dmctl/dmctl
                src:
                  path: bin/dmctl
              - name: dmctl/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dmctl/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dmctl/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dmctl component of Data Migration Platform.
              entrypoint: dmctl/dmctl
          - name: "sync-diff-inspector-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: sync_diff_inspector
                src:
                  path: bin/sync_diff_inspector
            tiup:
              description: >-
                sync-diff-inspector is a tool used to verify the consistency across different MySQL-compatible data sources.
              entrypoint: sync_diff_inspector
          - name: container image - sync-diff-inspector
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/sync-diff-inspector"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/{{ template "image_dockerfile_folder" .Release.version }}sync-diff-inspector.Dockerfile
            files:
              - name: sync_diff_inspector
                src:
                  path: bin/sync_diff_inspector
          - name: container image - dm
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/dm"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/{{ template "image_dockerfile_folder" .Release.version }}dm.Dockerfile
            files:
              - name: dm-master
                src:
                  path: bin/dm-master
              - name: dm-worker
                src:
                  path: bin/dm-worker
              - name: dmctl
                src:
                  path: bin/dmctl
          - name: container image - tiflow-engine
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/tiflow"
            context: . # just build under git repo folder.
            dockerfile: deployments/engine/docker/Dockerfile
            build_args:
              - GOPROXY=http://goproxy.pingcap.net,https://goproxy.cn,direct
      - description: For range [v6.5.0, v9.0.0)
        if: {{ semver.CheckConstraint ">= 6.5.0-0, < v9.0.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - os: darwin
              description: install nodejs toolchain.
              script: |
                NODE_VERSION="v16.20.2"
                NVM_VERSION="v0.39.5"
                NVM_DIR="$HOME/.nvm"
                mkdir -p $NVM_DIR

                if [ ! -s "$NVM_DIR/nvm.sh" ]; then
                  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash
                fi
                . $NVM_DIR/nvm.sh
                nvm install ${NODE_VERSION}
                nvm use ${NODE_VERSION}
                nvm alias default ${NODE_VERSION}

                node --version && npm --version
                npm install -g yarn
            - script: |
                make cdc dm-master-with-webui dm-worker dmctl dm-syncer
        artifacts:
          - name: "cdc-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: cdc
                src:
                  path: bin/cdc
            tiup:
              description: >-
                CDC is a change data capture tool for TiDB
              entrypoint: cdc
          - name: "dm-master-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dm-master/dm-master
                src:
                  path: bin/dm-master
              - name: dm-master/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dm-master/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dm-master/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dm-master component of Data Migration Platform.
              entrypoint: dm-master/dm-master
          - name: "dm-worker-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dm-worker/dm-worker
                src:
                  path: bin/dm-worker
              - name: dm-worker/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dm-worker/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dm-worker/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dm-worker component of Data Migration Platform.
              entrypoint: dm-worker/dm-worker
          - name: "dmctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dmctl/dmctl
                src:
                  path: bin/dmctl
              - name: dmctl/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dmctl/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dmctl/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dmctl component of Data Migration Platform.
              entrypoint: dmctl/dmctl
          - name: container image - cdc
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/cdc"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/{{ template "image_dockerfile_folder" .Release.version }}ticdc.Dockerfile
            files: # context files
              - name: cdc
                src:
                  path: bin/cdc
          - name: container image - dm
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/dm"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/{{ template "image_dockerfile_folder" .Release.version }}dm.Dockerfile
            files:
              - name: dm-master
                src:
                  path: bin/dm-master
              - name: dm-worker
                src:
                  path: bin/dm-worker
              - name: dmctl
                src:
                  path: bin/dmctl
          - name: container image - tiflow-engine
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/tiflow"
            context: . # just build under git repo folder.
            dockerfile: deployments/engine/docker/Dockerfile
            build_args:
              - GOPROXY=http://goproxy.pingcap.net,https://goproxy.cn,direct
      - description: For range [v6.5.6, v6.6.0) && fips profile
        if: {{ semver.CheckConstraint "~6.5.6-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [fips]
        steps:
          fips:
            - script: |
                ENABLE_FIPS=1 make build
        artifacts:
          - name: "cdc-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: cdc
                src:
                  path: bin/cdc
            tiup:
              description: >-
                CDC is a change data capture tool for TiDB
              entrypoint: cdc
          - name: fips container image - cdc
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/cdc"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/~6.5.12/ticdc.Dockerfile # same as new base.
            files: # context files
              - name: cdc
                src:
                  path: bin/cdc
      - description: For range [6.1.0, 6.5.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 6.5.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - os: darwin
              description: install nodejs toolchain.
              script: |
                NODE_VERSION="v16.20.2"
                NVM_VERSION="v0.39.5"
                NVM_DIR="$HOME/.nvm"
                mkdir -p $NVM_DIR

                if [ ! -s "$NVM_DIR/nvm.sh" ]; then
                  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash
                fi
                . $NVM_DIR/nvm.sh
                nvm install ${NODE_VERSION}
                nvm use ${NODE_VERSION}
                nvm alias default ${NODE_VERSION}

                node --version && npm --version
                npm install -g yarn
            - script: |
                make cdc dm-master-with-webui dm-worker dmctl dm-syncer
        artifacts:
          - name: "cdc-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: cdc
                src:
                  path: bin/cdc
            tiup:
              description: >-
                CDC is a change data capture tool for TiDB
              entrypoint: cdc
          - name: "dm-master-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dm-master/dm-master
                src:
                  path: bin/dm-master
              - name: dm-master/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dm-master/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dm-master/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dm-master component of Data Migration Platform.
              entrypoint: dm-master/dm-master
          - name: "dm-worker-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dm-worker/dm-worker
                src:
                  path: bin/dm-worker
              - name: dm-worker/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dm-worker/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dm-worker/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dm-worker component of Data Migration Platform.
              entrypoint: dm-worker/dm-worker
          - name: "dmctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: dmctl/dmctl
                src:
                  path: bin/dmctl
              - name: dmctl/conf/dm_worker.rules.yml
                src:
                  path: dm/metrics/alertmanager/dm_worker.rules.yml
              - name: dmctl/scripts/DM-Monitor-Professional.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Professional.json"
              - name: dmctl/scripts/DM-Monitor-Standard.json
                src:
                  path: "{{ if semver.CheckConstraint "< 6.6.0-0" .Release.version }}dm/{{ end }}metrics/grafana/DM-Monitor-Standard.json"
            tiup:
              description: >-
                dmctl component of Data Migration Platform.
              entrypoint: dmctl/dmctl
          - name: container image - cdc
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/cdc"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/lt6.5.12/ticdc.Dockerfile
            files: # context files
              - name: cdc
                src:
                  path: bin/cdc
          - name: container image - dm
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/dm"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiflow/lt6.5.12/dm.Dockerfile
            files:
              - name: dm-master
                src:
                  path: bin/dm-master
              - name: dm-worker
                src:
                  path: bin/dm-worker
              - name: dmctl
                src:
                  path: bin/dmctl
          - name: container image - tiflow-engine
            if: {{ semver.CheckConstraint ">= 6.3.0-0" .Release.version }}
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow/images/tiflow"
            context: . # just build under git repo folder.
            dockerfile: deployments/engine/docker/Dockerfile
            build_args:
              - GOPROXY=http://goproxy.pingcap.net,https://goproxy.cn,direct
  ticdc:
    desc: ticdc components
    git:
      url: https://github.com/pingcap/ticdc.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/ticdc/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 9.0.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/ticdc:v2024.10.8-78-gf83d845-centos7-go1.23
    routers:
      - description: For range [v9.0.0, )
        if: {{ semver.CheckConstraint ">= 9.0.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make cdc
        artifacts:
          - name: "cdc-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - name: cdc
                src:
                  path: bin/cdc
            tiup:
              description: >-
                CDC is a change data capture tool for TiDB
              entrypoint: cdc
          - name: container image - cdc
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/ticdc/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/ticdc/Dockerfile
            files: # context files
              - { name: cdc, src: { path: bin/cdc } }
  tiflow-operator:
    desc: tiflow operator components tarball
    git:
      url: https://github.com/pingcap/tiflow-operator.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tiflow-operator/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    builders:
      - image: ghcr.io/pingcap-qe/cd/utils/release:v2024.10.8-55-gdeaa249
    routers:
      - description: For all versions
        os: [linux]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: "echo skip"
        artifacts:
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiflow-operator/image"
            context: . # just build under git repo folder.
            dockerfile: Dockerfile
  tikv:
    desc: tikv components tarball
    git:
      url: https://github.com/tikv/tikv.git
      ref: {{ .Git.ref | default "master" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/tikv/tikv/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 6.1.0-0" .Release.version }}
        image: "ghcr.io/pingcap-qe/cd/builders/tikv:v2025.4.24-10-g9c32f77-centos7-devtoolset{{ ternary "9" "8" (eq .Release.profile "experiment") }}"
      - if: {{ and (semver.CheckConstraint "~6.5.6-0" .Release.version) (eq "fips" .Release.profile) }}
        image: ghcr.io/pingcap-qe/cd/builders/tikv:v2025.4.24-10-g9c32f77-fips
    routers:
      - description: For range [v8.4.0, )
        if: {{ semver.CheckConstraint ">= 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint, experiment]
        steps:
          release:
            - os: linux
              script: |
                if [ -f /opt/rh/devtoolset-8/enable ]; then
                    source /opt/rh/devtoolset-8/enable
                fi
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                ROCKSDB_SYS_STATIC=1 make dist_release
          enterprise:
            - os: linux
              script: |
                if [ -f /opt/rh/devtoolset-8/enable ]; then
                    source /opt/rh/devtoolset-8/enable
                fi
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                TIKV_EDITION=Enterprise ROCKSDB_SYS_STATIC=1 make dist_release
          failpoint:
            - os: linux
              script: |
                if [ -f /opt/rh/devtoolset-8/enable ]; then
                    source /opt/rh/devtoolset-8/enable
                fi
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                ROCKSDB_SYS_STATIC=1 make fail_release
          experiment:
            - os: linux
              script: |
                latest_devtoolset_dir=$(ls -d /opt/rh/devtoolset-* | sort -t- -k2,2nr | head -1)
                if [ -d "${latest_devtoolset_dir}" ]; then
                    source ${latest_devtoolset_dir}/enable
                fi
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                ROCKSDB_SYS_STATIC=1 make dist_release
        artifacts:
          - name: "tikv-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
            tiup:
              description: >-
                Distributed transactional key-value database, originally created to complement TiDB.
              entrypoint: tikv-server
          - name: "tikv-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
          - name: "tikv-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
            tiup:
              description: >-
                Distributed transactional key-value database, originally created to complement TiDB.
              entrypoint: tikv-server
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/tikv/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tikv/Dockerfile
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
      - description: For range [v6.1.0, v8.4.0)
        if: {{ semver.CheckConstraint ">= 6.1.0-0, < 8.4.0-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release, enterprise, failpoint]
        steps:
          release:
            - os: linux
              script: |
                source /opt/rh/devtoolset-8/enable
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                ROCKSDB_SYS_STATIC=1 make dist_release
          enterprise:
            - os: linux
              script: |
                source /opt/rh/devtoolset-8/enable
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                TIKV_EDITION=Enterprise ROCKSDB_SYS_STATIC=1 make dist_release
          failpoint:
            - os: linux
              script: |
                source /opt/rh/devtoolset-8/enable
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                ROCKSDB_SYS_STATIC=1 make fail_release
        artifacts:
          - name: "tikv-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
            tiup:
              description: >-
                Distributed transactional key-value database, originally created to complement TiDB.
              entrypoint: tikv-server
          - name: "tikv-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ ne "enterprise" .Release.profile }}
            files:
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
          - name: "tikv-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            if: {{ eq "enterprise" .Release.profile }}
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
            tiup:
              description: >-
                Distributed transactional key-value database, originally created to complement TiDB.
              entrypoint: tikv-server
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/tikv/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tikv/{{ template "image_dockerfile_folder" .Release.version }}Dockerfile
            files: # prepare for context
              - { name: tikv-server, src: { path: bin/tikv-server } }
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
      - description: For FIPs in range [6.5.6, 6.6.0)
        if: {{ semver.CheckConstraint "~6.5.6-0" .Release.version }}
        os: [linux]
        arch: [amd64, arm64]
        profile: [fips]
        steps:
          fips:
            - os: linux
              script: |
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: ENABLE_FIPS=1 ROCKSDB_SYS_STATIC=1 make dist_release
        artifacts:
          - name: "tikv-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
          - name: "tikv-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
          - name: fips container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/tikv/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tikv/fips.Dockerfile
            files: # prepare for context
              - { name: tikv-server, src: { path: bin/tikv-server } }
              - { name: tikv-ctl, src: { path: bin/tikv-ctl } }
      - description: For Next-Gen
        os: [linux]
        arch: [amd64, arm64]
        profile: [next-gen]
        steps:
          next-gen:
            - os: linux
              script: |
                latest_devtoolset_dir=$(ls -d /opt/rh/devtoolset-* | sort -t- -k2,2nr | head -1)
                if [ -d "${latest_devtoolset_dir}" ]; then
                    source ${latest_devtoolset_dir}/enable
                fi
                if [ "$(uname -m)" == "aarch64" ]; then
                    export JEMALLOC_SYS_WITH_LG_PAGE=16
                fi
            - script: |
                make release
                mkdir -p bin
                cp target/release/* bin/
        artifacts:
          - name: "tikv-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: tikv-server, src: { path: bin/tikv-server } }
          - name: "cse-ctl-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: cse-ctl, src: { path: bin/cse-ctl } }
          - name: "tikv-worker-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: tikv-worker, src: { path: bin/tikv-worker } }
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/tikv/tikv/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tikv/next-gen.Dockerfile
            files: # prepare for context
              - { name: tikv-server, src: { path: bin/tikv-server } }
              - { name: cse-ctl, src: { path: bin/cse-ctl } }
              - { name: tikv-worker, src: { path: bin/tikv-worker } }

  tiproxy:
    desc: tiproxy components tarballs and images
    git:
      url: https://github.com/pingcap/tiproxy.git
      ref: {{ .Git.ref | default "main" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tiproxy/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - if: {{ semver.CheckConstraint ">= 1.3.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-129-ga6c42c5-centos7-go1.23
      - if: {{ semver.CheckConstraint ">= 0.1.2-0, < 1.3.0-0" .Release.version }}
        image: ghcr.io/pingcap-qe/cd/builders/tidb:v2024.10.8-12-gb9ffe36-centos7-go1.21
    routers:
      - description: From 0.1.2
        if: {{ semver.CheckConstraint ">= 0.1.2-0" .Release.version }}
        os: [linux, darwin]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: make cmd
        artifacts:
          - name: "tiproxy-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: tiproxy, src: { path: bin/tiproxy } }
              - { name: tiproxyctl, src: { path: bin/tiproxyctl } }
            tiup:
              description: >-
                TiProxy is a database proxy that is based on TiDB.
              entrypoint: tiproxy
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tiproxy/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tiproxy/Dockerfile
            files: # prepare for context
              - { name: tiproxy, src: { path: bin/tiproxy } }
              - { name: tiproxyctl, src: { path: bin/tiproxyctl } }
              - { name: conf/, src: { path: conf/ } }
  tici:
    desc: tici components tarballs and images
    git:
      # In the future, the repo will be open source in the `pingcap` ORG.
      url: https://github.com/pingcap-inc/tici.git
      ref: {{ .Git.ref | default "main" }}
      sha: {{ .Git.sha | default "" }}
    version: {{ .Release.version }} # segment version.
    artifactory:
      package_repo: "{{ .Release.registry }}/pingcap/tici/package"
      tags:
        {{- if .Git.sha }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}-{{ strings.Trunc 7 .Git.sha }}
        {{- end }}
        - {{ strings.ReplaceAll "/" "-" .Git.ref | strings.ToLower }}
        - {{ .Release.version }}
    # binary builder, also we need it when build for mac to get build tools versions and other informations.
    builders:
      - image: ghcr.io/pingcap-qe/cd/builders/tikv:v2024.10.8-139-g74d1fec-centos7-devtoolset10
    routers:
      - description: currently in demo stage
        os: [linux]
        arch: [amd64, arm64]
        profile: [release]
        steps:
          release:
            - script: |
                source /opt/rh/devtoolset-10/enable
                # Verify Rust environment
                echo "Rust version: $(rustc --version)"
                echo "Cargo version: $(cargo --version)"

                make release
        artifacts:
          - name: "tici-{{ .Release.version }}-{{ .Release.os }}-{{ .Release.arch }}.tar.gz"
            files:
              - { name: tici, src: { path: target/release/tici } }
          - name: container image
            type: image
            artifactory:
              repo: "{{ .Release.registry }}/pingcap/tici/image"
            dockerfile: https://github.com/PingCAP-QE/artifacts/raw/main/dockerfiles/products/tici/Dockerfile
            files: # prepare for context
              - { name: tici, src: { path: target/release/tici } }
